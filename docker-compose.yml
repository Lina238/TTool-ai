version: '3.8'

services:
  rabbitmq:
    image: "rabbitmq:management"
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always
    ports:
      - "15672:15672"
      - "5672:5672"
    env_file:
      - .env

  postgres:
    image: postgres:latest
    healthcheck:
      test: [ "CMD-SHELL",  "/usr/local/bin/pg_healthcheck.sh"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always
    ports:
      - "5432:5432"
    volumes:
      - ${POSTGRES_DIR}:/var/lib/postgresql/data
      - ./pg_healthcheck.sh:/usr/local/bin/pg_healthcheck.sh
    env_file:
      - .env

  control_api:
    build: ./src/controlservice
    ports:
      - "16666:8000"
    command: uvicorn main:app --host 0.0.0.0 --reload
    volumes:
      - ${VIDEO_DIR}:/media/train_videos/
      - ${DATA_DIR}:/data
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
          condition: service_healthy
    env_file:
      - .env
    restart: always

  training_worker:
    build: ./src/trainingservice
    command: python3 training_worker.py
    runtime: nvidia
    volumes:
      - ${DATA_DIR}:/data
      - ${VIDEO_DIR}:/media/train_videos/
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
          condition: service_healthy
    env_file:
      - .env
    restart: always

  dataset_worker:
    build: ./src/datasetservice
    command: python dataset_worker.py
    volumes:
      - ${DATA_DIR}:/data
      - ${VIDEO_DIR}:/media/train_videos/
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
          condition: service_healthy
    env_file:
      - .env
    restart: always

